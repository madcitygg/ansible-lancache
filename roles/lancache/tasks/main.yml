---
# Tweak system limits
- name: increase queue listen size permanently
  lineinfile:
    dest: /etc/sysctl.conf
    regexp: '^net\.core\.somaxconn'
    line: "net.core.somaxconn={{ system.somaxconn }}"
  register: sys_somaxconn
  tags:
    - system

- name: increase queue listen size now
  command: sysctl -w net.core.somaxconn={{ system.somaxconn }}
  when: sys_somaxconn.changed
  tags:
    - system

- name: find max open files
  command: cat /proc/sys/fs/file-max
  register: file_max
  tags:
    - system

- name: increase max files in sysctl
  lineinfile:
    dest: /etc/sysctl.conf
    regexp: '^fs\.file-max'
    line: "fs.file-max={{ file_max.stdout }}"
  register: sys_filemax
  tags:
    - system

- name: increase max files now
  command: sysctl -w fs.file-max={{ file_max.stdout }}
  when: sys_filemax.changed
  tags:
    - system

- name: increase security limits
  template:
    src: "limits/lancache.conf"
    dest: "/etc/security/limits.d/lancache.conf"
    owner: root
    group: root
    mode: 0644
  tags:
    - system

# - name: add pam limits
#   lineinfile:
#     dest: /etc/pam.d/common-session
#     regexp: "^session required pam_limits.so$"
#     line: "session required pam_limits.so"
#     insertafter: EOF
#   tags:
#     - system

- name: set systemd default limit
  lineinfile:
    dest: "/etc/systemd/{{ item }}"
    regexp: '^#?DefaultLimitNOFILE'
    line: "DefaultLimitNOFILE=infinity"
  tags:
    - system
  with_items:
    - user.conf
    - system.conf

# Create directories

- name: create nginx directories
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: 0755
  tags:
    - nginx
  with_items:
    - /etc/nginx
    - /etc/nginx/sites-enabled
    - /etc/nginx/conf.d
    - /var/log/nginx

- name: install nginx logrotate
  copy:
    src: nginx.logrotate
    dest: /etc/logrotate.d/nginx
    owner: root
    group: root
    mode: 0644
  tags:
    - nginx

- name: create lancache log dir
  file:
    path: "{{ dirs.log }}"
    state: directory
    owner: root
    group: root
    mode: 0755
  tags:
    - nginx

- name: create cache log dirs
  file:
    path: "{{ dirs.log }}/{{ item }}"
    state: directory
    owner: root
    mode: 0755
  tags:
    - nginx
  with_items: "{{ caches.keys() }}"

- name: create cache tmp dir
  file:
    path: "{{ dirs.cache }}/tmp/"
    state: directory
    owner: www-data
    group: www-data
    mode: 0755
  tags:
    - nginx

- name: create cache dirs
  file:
    path: "{{ dirs.cache }}/{{ item }}/"
    state: directory
    owner: www-data
    group: www-data
    mode: 0755
  tags:
    - nginx
  with_items: "{{ caches.keys() }}"


# Install nginx

- name: install nginx dependencies
  apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
  tags:
    - nginx
  with_items:
    - build-essential
    - ssl-cert
    - libssl-dev
    - zlib1g-dev
    - libpcre3
    - libpcre3-dev
    - unzip

- name: download nginx
  get_url:
    url: "http://nginx.org/download/{{ nginx.version }}.tar.gz"
    dest: "/tmp/{{ nginx.version }}.tar.gz"
  register: nginx_source
  tags:
    - nginx

- name: unpack nginx
  unarchive:
    copy: no
    dest: /tmp/
    src: "{{ nginx_source.dest }}"
  when: nginx_source.changed
  register: nginx_source_unpack
  tags:
    - nginx

- name: configure nginx
  command: >
    ./configure --sbin-path=/usr/sbin/nginx
                --conf-path=/etc/nginx/nginx.conf
                --pid-path=/run/nginx.pid
                --error-log-path=/var/log/nginx/error.log
                --http-log-path=/var/log/nginx/access.log
                --with-http_ssl_module
                --with-pcre-jit
                --with-http_slice_module
                --with-file-aio
                --with-threads
                --with-http_stub_status_module
  args:
    chdir: "/tmp/{{ nginx.version }}"
  when: nginx_source_unpack.changed
  register: nginx_configure
  tags:
    - nginx

- name: install nginx
  shell: make && make install
  args:
    chdir: "/tmp/{{ nginx.version }}"
  when: nginx_configure|changed
  tags:
    - nginx


# Set up network interfaces

- name: create interfaces
  template:
    src: interfaces.conf
    dest: /etc/network/interfaces.d/lancache
    owner: root
    group: root
    mode: 0644
  tags:
    - network

- name: ensure interfaces are loaded
  lineinfile:
    dest: /etc/network/interfaces
    regexp: '^source /etc/network/interfaces.d/\*'
    line: "source /etc/network/interfaces.d/*"
    insertafter: EOF
  tags:
    - network


# Config

- name: create nginx config
  template:
    src: "{{ item }}"
    dest: "/etc/nginx/{{ item }}"
    owner: root
    group: root
    mode: 0644
  tags:
    - configs
  with_items:
    - nginx.conf
    - mime.types
  notify:
    - reload nginx

- name: create lancache config dir
  file:
    path: "/etc/nginx/lancache"
    state: directory
    owner: root
    group: root
    mode: 0755
  tags:
    - nginx

- name: create lancache configs
  template:
    src: "lancache/{{ item }}"
    dest: "/etc/nginx/lancache/{{ item }}"
    owner: root
    group: root
    mode: 0644
  tags:
    - configs
  with_items:
    - caches.conf
    - _cache-range.conf
    - _cache-slice.conf
    - _proxy-base.conf
    - _proxy-cache.conf
  notify:
    - reload nginx

- name: install cache vhosts
  template:
    src: "vhosts/{{ item }}.conf"
    dest: "/etc/nginx/sites-enabled/{{ item }}.conf"
    owner: root
    group: root
    mode: 0644
  tags:
    - configs
  with_items: "{{ caches.keys() }}"
  notify:
    - reload nginx

- name: make default server forbidden
  template:
    src: default.jinja2
    dest: /etc/nginx/sites-enabled/000-default
    owner: root
    group: root
    mode: 0644
  tags:
    - nginx
  notify:
    - reload nginx


# Firewall

- name: allow http(s) connections
  ufw:
    rule: allow
    proto: tcp
    port: "{{ item }}"
  with_items:
    - 80
    - 443
  tags:
    - nginx


# Service

- name: install nginx init
  copy:
    src: nginx.init
    dest: /etc/init.d/nginx
    owner: root
    group: root
    mode: 0755
  tags:
    - nginx

- name: install nginx default
  template:
    src: default/nginx
    dest: /etc/default/nginx
    owner: root
    group: root
    mode: 0755
  tags:
    - nginx

- name: enable nginx service
  service:
    name: nginx
    enabled: yes
    state: started
  tags:
    - nginx


# DNS

# - name: generate some kind of dns conf
#   become: false
#   template:
#     src: dns.txt
#     dest: ./dns.out
#   delegate_to: localhost
#   tags:
#     - dns

# - name: install unbound conf
#   template:
#     src: unbound.conf
#     dest: /etc/unbound/unbound.conf
#     owner: root
#     group: root
#     mode: 0755
#   tags:
#     - dns
